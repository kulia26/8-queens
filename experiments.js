const Move = require('./move');
const { performance } = require('perf_hooks');
const bfs = require('./bfs');
const aStar = require('./a-star');

const searchMethods = {
    'bfs' : bfs,
    'A*' : aStar,
}

let experimentsCount = 0;

const experiment = (initialMove, searchMethod) => {
    const method = searchMethods[searchMethod];

    let result;
    let t0, t1;
    if(method) {
        t0 = performance.now()

        result = method(initialMove);

        t1 = performance.now()
        experimentsCount++;
    }
    return {
            id: experimentsCount,
            queensForPlace: 8 - initialMove.getLastRowMove(),
            state: initialMove.getId(),
            method: searchMethod,
            'time, ms': t1 - t0,
            goalState: result.goalState,
            maxVerticesCount: result.maxVerticesCount,
            generatedVerticesCount: result.generatedVerticesCount,
    }
}

const tests = [
    {
        board: [
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0]
        ],
        row: 0,
    },
    {
        board: [
            [0,1,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0]
        ],
        row: 0,
    },
    {
        board: [
            [0,0,1,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0]
        ],
        row: 0,
    },
    {
        board: [
            [0,0,0,1,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0]
        ],
        row: 0,
    },
    {
        board: [
            [0,0,0,0,1,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0]
        ],
        row: 0,
    },
    {
        board: [
            [0,0,0,0,0,0,1,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0]
        ],
        row: 0,
    },
    {
        board: [
            [0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0]
        ],
        row: 0,
    },
    {
        board: [
            [0,0,0,0,0,1,0,0],
            [0,0,1,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0]
        ],
        row: 1,
    },
    {
        board: [
            [0,0,0,0,0,1,0,0],
            [0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0]
        ],
        row: 1,
    },
    {
        board: [
            [0,0,0,0,0,1,0,0],
            [0,0,1,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0]
        ],
        row: 1,
    },
    {
        board: [
            [0,0,0,0,0,0,0,1],
            [0,0,0,1,0,0,0,0],
            [0,1,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0]
        ],
        row: 2,
    },
    {
        board: [
            [0,0,0,1,0,0,0,0],
            [0,0,0,0,0,0,1,0],
            [0,1,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0]
        ],
        row: 2,
    },
    {
        board: [
            [0,0,0,0,1,0,0,0],
            [0,0,0,0,0,0,1,0],
            [0,0,0,0,1,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0]
        ],
        row: 2,
    },
    {
        board: [
            [0,0,0,0,1,0,0,0],
            [0,0,1,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,1,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0]
        ],
        row: 3,
    },
    {
        board: [
            [0,0,0,0,1,0,0,0],
            [0,0,1,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [0,0,0,0,0,1,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0]
        ],
        row: 3,
    },
    {
        board: [
            [0,0,0,0,1,0,0,0],
            [0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,1,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0]
        ],
        row: 3,
    },
    {
        board: [
            [0,0,0,0,1,0,0,0],
            [0,1,0,0,0,0,0,0],
            [0,0,0,1,0,0,0,0],
            [0,0,0,0,0,0,1,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0]
        ],
        row: 3,
    },
    {
        board: [
            [0,1,0,0,0,0,0,0],
            [0,0,0,1,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,1],
            [0,0,0,0,1,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0]
        ],
        row: 4,
    },
    {
        board: [
            [0,0,0,0,0,1,0,0],
            [0,0,0,1,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,1],
            [0,0,0,0,1,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0]
        ],
        row: 4,
    },
    {
        board: [
            [0,0,0,0,0,1,0,0],
            [0,0,0,1,0,0,0,0],
            [0,1,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,1],
            [0,0,0,0,0,1,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0]
        ],
        row: 4,
    },
]

const results = [];

tests.forEach(test => {
    const board = [...test.board];
    const row = test.row;
    const move1 = new Move([...board], row);
    const e1 = experiment(move1, 'bfs');
    const move2 = new Move(board, row);
    const e2 = experiment(move2, 'A*');
    results.push(e1, e2)
})

console.log(results)

const fs = require('fs');
fs.writeFile('results.json', JSON.stringify(results), function (err) {
    if (err) return console.log(err);
    console.log('Results > results.json');
});

module.export = experiment;



